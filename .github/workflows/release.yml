name: release
run-name: Release run ${{ github.run_number }}
on:
  workflow_dispatch:

jobs:
  validate:
    name: Validate
    runs-on: ubuntu-latest

    permissions:
      contents: read
      checks: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          # we need the full history to validate license headers
          fetch-depth: 0
      - name: Setup Java
        uses: actions/setup-java@v3 # Does also set up Maven and GPG
        with:
          java-package: 'jdk'
          java-version: '17'
          distribution: 'temurin'
          cache: maven
          check-latest: true
      - name: Validate license headers
        run: mvn -U -B license:check -P sxda.build.license-validation

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: validate

    permissions:
      contents: write
      checks: write
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup ssh agent and key
        uses: tanmancan/action-setup-ssh-agent-key@1.0.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}
      - name: Setup the git user
        run: |
          git config --global user.name "${{ vars.RELEASE_BOT_NAME }}"
          git config --global user.email "${{ vars.RELEASE_BOT_EMAIL }}"
          git config --global gpg.format ssh
          git config --global user.signingkey "${{ vars.SSH_PUBLIC_KEY }}"
          git config --global commit.gpgsign true
          git config --global tag.gpgsign true
          ssh-add -L
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          registry-url: https://registry.npmjs.org/
      - uses: pnpm/action-setup@v2
        name: Install pnpm
        with:
          version: 7
          run_install: true
      - name: Setup Java
        uses: actions/setup-java@v3 # Does also set up Maven and GPG
        with:
          java-package: 'jdk'
          java-version: '17'
          distribution: 'temurin'
          cache: maven
          check-latest: true
          server-id: 'central' # must match the serverId configured for the central-publishing-maven-plugin
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE
      - name: Prepare and tag
        run: |
          ssh-add -L
          export RELEASE_VERSION=$(mvn help:evaluate -D expression=project.version -q -D forceStdout | sed 's/-SNAPSHOT//')
          cd ace && npm run version:release -- --newVersion=$RELEASE_VERSION && cd ..
          mvn -U -B versions:set -D newVersion=$RELEASE_VERSION -D generateBackupPoms=false
          git add -v ace/package.json demo/package.json ace/pom.xml demo/pom.xml ace.client/pom.xml ace.ui.html/pom.xml pom.xml
          git commit -m "Release $RELEASE_VERSION"
          git tag -a v$RELEASE_VERSION -m "Release $RELEASE_VERSION"
          echo "TAG_NAME=v$RELEASE_VERSION" >> $GITHUB_ENV
          git push --tags
          git push
          mvn -U -B clean deploy -P sxda.build.release
          npm install -g semver
          export NEXT_SNAPSHOT_VERSION=$(semver -i patch $RELEASE_VERSION)
          cd ace && npm run version:release -- --newVersion=$NEXT_SNAPSHOT_VERSION-snapshot && npm run version:snapshot && cd ..
          mvn -U -B versions:set -D newVersion=$NEXT_SNAPSHOT_VERSION-SNAPSHOT -D generateBackupPoms=false
          git add -v ace/package.json demo/package.json ace/pom.xml demo/pom.xml ace.client/pom.xml ace.ui.html/pom.xml pom.xml
          git commit -m "Prepare next snapshot version $NEXT_SNAPSHOT_VERSION-SNAPSHOT"
          git push
        env:
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PRIVATE_KEY_PASSPHRASE }}
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          MAVEN_OPTS: -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
        # cd ace && npm run build:all && npm publish --access public && cd ..
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: Release ${{ env.TAG_NAME }}
          draft: false
          prerelease: false
